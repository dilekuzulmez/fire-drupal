{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set video_url = drupal_entity('media', content.field_video['#items'][0].target_id)['#media'].field_media_oembed_video.0.value %}
{% set video_option = content.field_video_options['#items'].0.value %}

{% if 'vimeo' in video_url %}
  {% set video_type = 'vimeo' %}
  {% if video_option == 'video--background' %}
    {% set formatted_video_url = "https://player.vimeo.com/video/" ~ video_url|video_id ~ "?byline=false&portrait=false&title=false&background=true" %}
  {% else %}
    {% set formatted_video_url = "https://player.vimeo.com/video/" ~ video_url|video_id ~ "?byline=false&portrait=false&title=false" %}
  {% endif %}
{% elseif 'youtube' in video_url %}
  {% set video_type = 'youtube' %}
  {% set formatted_video_url = "https://www.youtube.com/embed/" ~ video_url|video_id ~ "?autoplay=0&controls=0&modestbranding=1&rel=0&enablejsapi=1" %}
{% elseif 'youtu.be' in video_url %}
  {% set video_type = 'youtube' %}
  {% set formatted_video_url = "https://www.youtube.com/embed/" ~ video_url|video_id ~ "?autoplay=0&controls=0&modestbranding=1&rel=0&enablejsapi=1" %}
{% endif %}

{%
  set classes = [
    'video',
    video_option
  ]
%}

<div{{ attributes.addClass(classes) }}data-fire-component="video">
  <iframe
    data-video-type="{{ video_type }}"
    class="video__iframe lozad"
    src="{{ formatted_video_url }}"
    frameborder="0"
    allowscriptaccess="always"
    allow="autoplay"
    webkitAllowFullScreen
    mozallowfullscreen
    allowFullScreen>
  </iframe>
</div>
