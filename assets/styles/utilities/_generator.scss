// Docs: https://github.com/twbs/bootstrap/blob/346be3e7ea06d75418ae48b3837bf722a69a0a23/site/content/docs/4.3/utilities/api.md

$utilities: () !default;

// prettier-ignore
$utilities: map-merge((
  "opacity": (
    property: opacity,
    values: (
      0: 0,
      25: 0.25,
      50: 0.5,
      100: 1,
    )
  ),
  "overflow": (
    property: "overflow",
    values: (
      visible: visible
    )
  ),
  "text": (
    property: 'font-size',
    class: 'text',
    responsive: true,
    values: $text-sizes
  ),
  "text-align": (
    property: 'text-align',
    responsive: true,
    values: (
      left: left,
      right: right,
      center: center
    )
  ),
  "letter-spacing": (
    property: 'letter-spacing',
    values: (
      150: 1.5
    )
  ),
), $utilities);

@mixin generate-utility($utility, $infix) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == 'string' or type-of(nth($values, 1)) != 'list' {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == 'string' {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
    $property-class: if($property-class == null, '', $property-class);

    $infix: if($property-class == '' and str-slice($infix, 1, 1) == '-', str-slice($infix, 2), $infix);

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if($key, if($property-class == '' and $infix == '', '', '-') + $key, '');

    .#{$property-class + $infix + $property-class-modifier} {
      @each $property in $properties {
        @if map-get($utility, hover) {
          @if map-get($utility, transition) and map-get($utility, 'transition-time') {
            transition: #{map-get($utility, transition)} map-get($utility, 'transition-time');
          }

          &:hover {
            #{$property}: $value !important;
          }
        } @else {
          #{$property}: $value !important;
        }
      }
    }
  }
}

// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
  // Generate media query if needed
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    // Loop over each utility property
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if type-of($utility) == 'map' and (map-get($utility, responsive) or $infix == '') {
        @include generate-utility($utility, $infix);
      }
    }
  }
}
